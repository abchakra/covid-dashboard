import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { Country, CountryData, CountryInfo } from './Country';
import { fetchCount } from './statisticsAPI';

export interface StatisticsState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  countryData: Country[];
  countryInfo: CountryInfo[];
}

const initialState: StatisticsState = {
  value: 0,
  status: 'idle',
  countryData: [],
  countryInfo: [],
};

export const fetchByCountry = createAsyncThunk(
  'statistics/fetchByCountry',
  // Declare the type your function argument here:
  async (slug: string) => {
    const response = await fetch(
      // `https://api.covid19api.com/premium/country/${slug}`
      // `https://api.covid19api.com/country/${slug}/status/confirmed?from=2020-03-01T00:00:00Z&to=2020-04-01T00:00:00Z`
      `https://api.covid19api.com/total/country/${slug}`,
      {}
    );
    return (await response.json()) as CountryInfo[];
  }
);

//
export const fetchCountries = createAsyncThunk(
  'statistics/fetchCountries',
  // Declare the type your function argument here:
  async () => {
    const response = await fetch(`https://api.covid19api.com/countries`);
    return (await response.json()) as Country[];
  }
);
export const statisticsSlice = createSlice({
  name: 'statistics',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // fetchCountries: (state, action: PayloadAction<CountryData>) => {
    //   state.countries = action.payload.countries;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCountries.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchCountries.fulfilled, (state, action) => {
        state.status = 'idle';
        // console.log('idle', action.payload.length);
        state.countryData = action.payload;
      })
      .addCase(fetchByCountry.fulfilled, (state, action) => {
        state.status = 'idle';

        let data: CountryInfo[] = action.payload;
        data = data.filter(
          (a: CountryInfo) =>
            a.Active !== 0 && a.Recovered !== 0 && a.Deaths !== 0
        );
        // console.log('fetchByCountry :', data);
        state.countryInfo = data;
      });
  },
});

// export const { fetchcountryData } = statisticsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCountries = (state: RootState) =>
  state.statistics.countryData;
export const selectCountryInfo = (state: RootState) =>
  state.statistics.countryInfo;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default statisticsSlice.reducer;
